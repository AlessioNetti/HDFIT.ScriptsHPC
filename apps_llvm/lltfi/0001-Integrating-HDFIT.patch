From fe3d8c6da1907ef69bb6bab9a21674f62fed7571 Mon Sep 17 00:00:00 2001
From: "Netti, Alessio" <alessio.netti@intel.com>
Date: Wed, 9 Nov 2022 13:28:08 +0000
Subject: [PATCH] Integrating HDFIT

---
 CMakeLists.txt                                |  13 +
 README.md                                     |   7 +
 llvm_passes/RegisterPasses.cpp                |  23 ++
 llvm_passes/core/FaultInjectionPass.cpp       |  73 +++--
 llvm_passes/core/FaultInjectionPass.h         |  11 +-
 llvm_passes/core/ProfilingPass.cpp            |   7 +-
 llvm_passes/core/RegLocBasedFIRegSelector.cpp |  23 ++
 runtime_lib/CMakeLists.txt                    |   5 +
 runtime_lib/FaultInjectionLib.c               | 279 ++++++++++--------
 9 files changed, 276 insertions(+), 165 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1ec89e9c..b7a929e6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,6 +2,19 @@ cmake_minimum_required(VERSION 3.15)
 
 option(NO_GUI "Skip building GUI" OFF)
 
+# HDFIT: uncomment for double-precision FP instrumentation, single-precision otherwise
+#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHDFIT_DOUBLE")
+#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHDFIT_DOUBLE")
+
+# HDFIT: uncomment to perform the FI pass as first during optimization, last otherwise
+#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHDFIT_FIRSTOPT")
+
+#HDFIT: uncomment to inline LLTFI function calls (enabled by default)
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHDFIT_INLINE")
+
+#HDFIT: uncomment to perform one additional srand() call at FI time
+#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHDFIT_SRAND")
+
 add_subdirectory(llvm_passes)
 add_subdirectory(runtime_lib)
 add_subdirectory(bin)
diff --git a/README.md b/README.md
index 724bcf77..3669123e 100755
--- a/README.md
+++ b/README.md
@@ -1,3 +1,10 @@
+HDFIT + LLTFI Information
+=====
+
+This version of LLTFI is customized in order to operate in conjunction with the [HDFIT](https://intellabs.github.io/HDFIT/) fault injection framework, on a variety of HPC workloads. Please refer to the README below for instructions on how to build LLTFI, as well as to the HDFIT [documentation](https://github.com/IntelLabs/HDFIT.ScriptsHPC).
+
+Please note that a series of HDFIT-specific build options were added to LLTFI: these are documented, and can be toggled, in LLTFI's global [CMakeLists.txt](CMakeLists.txt) file.
+
 LLTFI
 =====
 LLTFI (Low Level Tensor Fault Injector) is a unified SWiFI (Software-implemented fault injection) tool that supports fault injection of both C/C++ programs and ML applications written using high-level frameworks such as TensorFlow and PyTorch.
diff --git a/llvm_passes/RegisterPasses.cpp b/llvm_passes/RegisterPasses.cpp
index c6f4620e..a4a25fb7 100644
--- a/llvm_passes/RegisterPasses.cpp
+++ b/llvm_passes/RegisterPasses.cpp
@@ -1,5 +1,9 @@
+// Copyright (C) 2023 Intel Corporation (HDFIT components)
+// SPDX-License-Identifier: Apache-2.0
+
 #include "llvm/Passes/PassBuilder.h"
 #include "llvm/Passes/PassPlugin.h"
+#include "llvm/Transforms/IPO/AlwaysInliner.h"
 
 #include "core/ProfilingPass.h"
 #include "core/GenLLFIIndexPass.h"
@@ -18,6 +22,25 @@ namespace llfi {
     return {LLVM_PLUGIN_API_VERSION, "llfi_passes", LLVM_VERSION_STRING,
             [](PassBuilder &PB) {
 
+// HDFIT: We only need the genllfiindex and faultinjection passes
+// Registered as last to not interfere with vectorization and such
+// These two registration calls DO NOT impact opt runs, but only
+// affect the clang frontend when using LLTFI
+#ifndef HDFIT_FIRSTOPT
+              PB.registerOptimizerLastEPCallback(
+#else // HDFIT_FIRSTOPT
+              PB.registerPipelineStartEPCallback(
+#endif
+                  [](ModulePassManager &MPM, OptimizationLevel) {
+                      MPM.addPass(llfi::GenLLFIIndexPass());
+                      MPM.addPass(llfi::NewFaultInjectionPass());
+#ifdef HDFIT_INLINE
+		      MPM.addPass(AlwaysInlinerPass());
+#endif
+                      return true;
+                  });
+// ---------------------------------------------------------------
+
               // For GenLLFIIndexPass
               PB.registerPipelineParsingCallback(
                   [](StringRef Name, ModulePassManager &MPM,
diff --git a/llvm_passes/core/FaultInjectionPass.cpp b/llvm_passes/core/FaultInjectionPass.cpp
index b2640174..6c2f09fe 100644
--- a/llvm_passes/core/FaultInjectionPass.cpp
+++ b/llvm_passes/core/FaultInjectionPass.cpp
@@ -15,6 +15,8 @@
 // fault injection function. This function definition is linked to the 
 // instrumented bitcode file (after this pass). 
 //===----------------------------------------------------------------------===//
+// Copyright (C) 2023 Intel Corporation (HDFIT components)
+
 #include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/Function.h"
 #include "llvm/IR/LLVMContext.h"
@@ -32,18 +34,20 @@ namespace llfi {
 
 char FaultInjectionPass::ID=0;
 
-std::string FaultInjectionPass::getFIFuncNameforType(const Type *type) {
+//HDFIT: need to use the module name to disambiguate FI functions
+std::string FaultInjectionPass::getFIFuncNameforType(const Type *type, Module &M) {
   std::string funcname;
   if (fi_rettype_funcname_map.find(type) != fi_rettype_funcname_map.end()) {
     funcname = fi_rettype_funcname_map[type];
   } else {
     funcname = "injectFault";
-    int ficount = fi_rettype_funcname_map.size();	
-    funcname += intToString(ficount);
+    int ficount = fi_rettype_funcname_map.size();
+    funcname = M.getModuleIdentifier() + "_" + funcname + intToString(ficount);
     fi_rettype_funcname_map[type] = funcname;
   }
   return funcname;
 }
+//---------------------------------------------------------------
 
 void FaultInjectionPass::insertInjectionFuncCall(
     std::map<Instruction*, std::list< int >* > *inst_regs_map, Module &M) {
@@ -125,7 +129,7 @@ void FaultInjectionPass::insertInjectionFuncCall(
       // dbgs() << "Getting function of type : " << *returntype <<"\n";
       FunctionType* injectfunctype = FunctionType::get(returntype, paramtypes_array_ref, false);
 
-      std::string funcname = getFIFuncNameforType(returntype);
+      std::string funcname = getFIFuncNameforType(returntype, M);
       FunctionCallee injectfunc =
           M.getOrInsertFunction(funcname, injectfunctype);
 
@@ -212,6 +216,9 @@ void FaultInjectionPass::createInjectionFuncforType(
     FunctionCallee pre_fi_func) {
   LLVMContext &context = M.getContext();
   Function *f = M.getFunction(fi_name);
+#ifdef HDFIT_INLINE
+  f->addFnAttr(Attribute::get(context, Attribute::AlwaysInline));
+#endif
   std::vector<Value*> args;
   for(Function::arg_iterator ai = f->arg_begin(); ai != f->arg_end(); ++ai)
     args.push_back(&*ai);
@@ -283,7 +290,7 @@ void FaultInjectionPass::createInjectionFunctions(Module &M) {
 }
 
 bool FaultInjectionPass::runOnModule(Module &M) {
-  checkforMainFunc(M);
+  //checkforMainFunc(M);
 
   std::map<Instruction*, std::list< int >* > *fi_inst_regs_map;
   Controller *ctrl = Controller::getInstance(M);
@@ -294,36 +301,42 @@ bool FaultInjectionPass::runOnModule(Module &M) {
   return true;
 }
 
-void FaultInjectionPass::checkforMainFunc(Module &M) {
+// HDFIT: we need this method to return a bool and not abort compilation
+bool FaultInjectionPass::checkforMainFunc(Module &M) {
   Function* mainfunc = M.getFunction("main");
-  if (mainfunc == NULL) {
-    errs() << "ERROR: Function main does not exist, " <<
-        "which is required by LLFI\n";
-    exit(1);
-  }
+  return mainfunc != NULL;
+  //if (mainfunc == NULL) {
+  //  errs() << "ERROR: Function main does not exist, " <<
+  //      "which is required by LLFI\n";
+  //  exit(1);
+  //}
 }
+// ---------------------------------------------------------------------
 
 void FaultInjectionPass::finalize(Module &M) {
-  Function *mainfunc = M.getFunction("main");
-  BasicBlock *entryblock = &mainfunc->front();
-
-  // function call for initInjections
-  FunctionCallee initfunc = getLLFILibInitInjectionFunc(M);
-  CallInst::Create(initfunc, "", entryblock->getFirstNonPHI());
-  
-  // function call for postInjections
-  FunctionCallee postfifunc = getLLFILibPostInjectionFunc(M);
-
-  std::set<Instruction*> exitinsts;
-  getProgramExitInsts(M, exitinsts);
-  assert (exitinsts.size() != 0 
-            && "Program does not have explicit exit point");
-  for (std::set<Instruction*>::iterator it = exitinsts.begin();
-         it != exitinsts.end(); ++it) {
-    Instruction *term = *it;
-    CallInst::Create(postfifunc, "", term);
-  }
+// HDFIT : creating init/post functions only in main
+    if(checkforMainFunc(M)) {
+        Function *mainfunc = M.getFunction("main");
+        BasicBlock *entryblock = &mainfunc->front();
+
+        // function call for initInjections
+        FunctionCallee initfunc = getLLFILibInitInjectionFunc(M);
+        CallInst::Create(initfunc, "", entryblock->getFirstNonPHI());
+
+        // function call for postInjections
+        FunctionCallee postfifunc = getLLFILibPostInjectionFunc(M);
 	
+        std::set<Instruction*> exitinsts;
+        getProgramExitInsts(M, exitinsts);
+        assert (exitinsts.size() != 0
+                && "Program does not have explicit exit point");
+        for (std::set<Instruction*>::iterator it = exitinsts.begin();
+             it != exitinsts.end(); ++it) {
+            Instruction *term = *it;
+            CallInst::Create(postfifunc, "", term);
+        }
+    }
+//--------------------------------------------------
   createInjectionFunctions(M);
 }
 
diff --git a/llvm_passes/core/FaultInjectionPass.h b/llvm_passes/core/FaultInjectionPass.h
index a6aa95a2..b324b7fe 100644
--- a/llvm_passes/core/FaultInjectionPass.h
+++ b/llvm_passes/core/FaultInjectionPass.h
@@ -1,3 +1,6 @@
+// Copyright (C) 2023 Intel Corporation (HDFIT components)
+// SPDX-License-Identifier: Apache-2.0
+
 #ifndef FAULTINJECTION_PASS_H
 #define FAULTINJECTION_PASS_H
 
@@ -25,7 +28,9 @@ namespace llfi {
     static char ID;
 
    private:
-    void checkforMainFunc(Module &M);
+// HDFIT: we need this method to return a bool and not abort compilation
+    bool checkforMainFunc(Module &M);
+// ---------------------------------------------------------------------
     void finalize(Module& M);
 
     void insertInjectionFuncCall(
@@ -36,7 +41,9 @@ namespace llfi {
     void createInjectionFunctions(Module &M);
 
   private:
-    std::string getFIFuncNameforType(const Type* type);
+// HDFIT: adding Module as input to disambiguate FI function names
+    std::string getFIFuncNameforType(const Type* type, Module &M);
+// --------------------------------------------------------------
 
     FunctionCallee getLLFILibPreFIFunc(Module &M);
     FunctionCallee getLLFILibFIFunc(Module &M);
diff --git a/llvm_passes/core/ProfilingPass.cpp b/llvm_passes/core/ProfilingPass.cpp
index 28af5fe3..1b3a55c4 100644
--- a/llvm_passes/core/ProfilingPass.cpp
+++ b/llvm_passes/core/ProfilingPass.cpp
@@ -11,6 +11,7 @@
 // See profiling_lib.c doProfiling() function for more details. This function
 // definition is linked to the instrumented bitcode file (after this pass).
 //===----------------------------------------------------------------------===//
+// Copyright (C) 2023 Intel Corporation (HDFIT components)
 
 #include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/Function.h"
@@ -102,6 +103,7 @@ bool LegacyProfilingPass::runOnModule(Module &M) {
   return true;
 }
 
+// HDFIT: do not abort if main function does not exist
 void LegacyProfilingPass::addEndProfilingFuncCall(Module &M) {
   Function* mainfunc = M.getFunction("main");
   if (mainfunc != NULL) {
@@ -118,12 +120,13 @@ void LegacyProfilingPass::addEndProfilingFuncCall(Module &M) {
       Instruction *term = *it;
       CallInst::Create(endprofilefunc, "", term);
     }
-  } else {
+  } /* else {
     errs() << "ERROR: Function main does not exist, " <<
         "which is required by LLFI\n";
     exit(1);
-  }
+  } */
 }
+//-----------------------------------------------------
 
 FunctionCallee LegacyProfilingPass::getLLFILibProfilingFunc(Module &M) {
   LLVMContext &context = M.getContext();
diff --git a/llvm_passes/core/RegLocBasedFIRegSelector.cpp b/llvm_passes/core/RegLocBasedFIRegSelector.cpp
index 8df3fb49..9409000a 100644
--- a/llvm_passes/core/RegLocBasedFIRegSelector.cpp
+++ b/llvm_passes/core/RegLocBasedFIRegSelector.cpp
@@ -1,9 +1,32 @@
+// Copyright (C) 2023 Intel Corporation (HDFIT components)
+// SPDX-License-Identifier: Apache-2.0
+
 #include "RegLocBasedFIRegSelector.h"
 
 namespace llfi {
 
+// HDFIT: Utility function to identify FP32 (vector) registers
+bool isRegFP32(Value* reg) {
+	Type* regType = reg->getType();
+	if (!regType) {
+		return false;
+	}
+
+#ifndef HDFIT_DOUBLE
+	return regType->getScalarType()->isFloatTy();
+#else // HDFIT_DOUBLE
+	return regType->getScalarType()->isDoubleTy();
+#endif
+}
+// ---------------------------------------------------------------
+
 bool RegLocBasedFIRegSelector::isRegofInstFITarget(Value *reg, 
                                                           Instruction *inst) {
+// HDFIT: FP32 check on the given register
+  if (!isRegFP32(reg)) {
+	  return false;
+  }
+// ---------------------------------------------------------------
   if (firegloc == dstreg) {
     return reg == inst;
   } else if (firegloc == allsrcreg) {
diff --git a/runtime_lib/CMakeLists.txt b/runtime_lib/CMakeLists.txt
index 68b6a5ed..893c8979 100644
--- a/runtime_lib/CMakeLists.txt
+++ b/runtime_lib/CMakeLists.txt
@@ -2,6 +2,11 @@ cmake_minimum_required(VERSION 2.8)
 
 project(llfi-rt)
 
+# HDFIT: using -O3 in an attempt to improve runtime performance
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
+# ------------------------------------------------------------
+
 add_library(llfi-rt SHARED 
     CommonFaultInjectors.cpp
     FaultInjectionLib.c
diff --git a/runtime_lib/FaultInjectionLib.c b/runtime_lib/FaultInjectionLib.c
index 32543944..cd26f7ce 100755
--- a/runtime_lib/FaultInjectionLib.c
+++ b/runtime_lib/FaultInjectionLib.c
@@ -1,3 +1,6 @@
+// Copyright (C) 2023 Intel Corporation (HDFIT components)
+// SPDX-License-Identifier: Apache-2.0
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -10,6 +13,21 @@
 /*BEHROOZ: We assume that the maximum number of fault injection locations is 100 when
 it comes to multiple bit-flip model.*/
 #define MULTIPLE_CYCLE_LENGTH 100
+
+// HDFIT: Defines required for env variable-based initialization
+#define BLASFIOPSCNT_ENV_VAR "BLASFI_OPSCNT"
+
+#define BLASFIMODE_ENV_VAR "BLASFI_MODE"
+#define BLASFIMODE_NONE_CONST "NONE"
+#define BLASFIMODE_TRANSIENT_CONST "TRANSIENT"
+
+#define BLASFICORRUPTION_ENV_VAR "BLASFI_CORRUPTION"
+#define BLASFICORRUPTION_NONE_CONST "NONE"
+#define BLASFICORRUPTION_STUCKHIGH_CONST "STUCKHIGH"
+#define BLASFICORRUPTION_STUCKLOW_CONST "STUCKLOW"
+#define BLASFICORRUPTION_FLIP_CONST "FLIP"
+//--------------------------------------------------------------
+
 /*BEHROOZ: This variable keeps track of the number of next_cycles*/
 static int fi_next_cycles_count = 0;
 //==============================================================
@@ -21,8 +39,10 @@ static FILE *injectedfaultsFile;
 
 static int fiFlag = 1;	// Should we turn on fault injections ?
 
+//TODO: this is all not thread-safe, fix if relevant
 static int opcodecyclearray[OPCODE_CYCLE_ARRAY_LEN];
 static bool is_fault_injected_in_curr_dyn_inst = false;
+static bool reg_selected = false;
 
 static struct {
   char fi_type[OPTION_LENGTH];
@@ -70,151 +90,134 @@ bool _getDecision(double probability) {
   return (rand() / (RAND_MAX * 1.0)) <= probability;
 }
 
-void _parseLLFIConfigFile() {
-  char ficonfigfilename[80];
-  strncpy(ficonfigfilename, "llfi.config.runtime.txt", 80);
-  FILE *ficonfigFile;
-  ficonfigFile = fopen(ficonfigfilename, "r");
-  if (ficonfigFile == NULL) {
-    fprintf(stderr, "ERROR: Unable to open llfi config file %s\n",
-            ficonfigfilename);
-    exit(1);
-  }
+// HDFIT: Re-using some utility code from our OpenBLAS implementation
+unsigned long long _rand_uint128() {
+	unsigned long long val = 0;
+	for (size_t i=0; i<9; i++) {
+		// Calling rand() 9 times, leveraging 15 bits at a time
+		// RAND_MAX is guaranteed to be at least 32767
+		// Multiplying val by RAND_MAX + 1 is equivalent to bit-shifting
+		// by RAND_MAX'2 bit width - assuming it is a power of 2 - 1
+		// After that, we can sum (or bitwise OR) to a new rand() call
 
-  const unsigned CONFIG_LINE_LENGTH = 1024;
-  char line[CONFIG_LINE_LENGTH];
-  char option[OPTION_LENGTH];
-  char *value = NULL;
-  /*BEHROOZ: */
-  int fi_next_cycles_index = 0;
-  /*=================================================*/
-  while (fgets(line, CONFIG_LINE_LENGTH, ficonfigFile) != NULL) {
-    if (line[0] == '#')
-      continue;
-
-    value = strtok(line, "=");
-    strncpy(option, value, OPTION_LENGTH);
-    value = strtok(NULL, "=");
-
-    //debug(("option, %s, value, %s;", option, value));
-
-    if (strcmp(option, "fi_type") == 0) {
-      strncpy(config.fi_type, value, OPTION_LENGTH);
-      if (config.fi_type[strlen(config.fi_type) - 1] == '\n')
-        config.fi_type[strlen(config.fi_type) - 1] = '\0';
-    } else if (strcmp(option, "fi_cycle") == 0) {
-      config.fi_accordingto_cycle = true;
-      config.fi_cycle = atoll(value);
-      /*BEHROOZ: I changed the below line to the current one to fix the fi_cycle*/
-      assert(config.fi_cycle > 0 && "invalid fi_cycle in config file"); //assert(config.fi_cycle >= 0 && "invalid fi_cycle in config file");
-    } else if (strcmp(option, "fi_index") == 0) {
-      config.fi_index = atol(value);
-      assert(config.fi_index >= 0 && "invalid fi_index in config file");
-    } else if (strcmp(option, "fi_reg_index") == 0) {
-      config.fi_reg_index = atoi(value);
-      assert(config.fi_reg_index >= 0 && "invalid fi_reg_index in config file");
-    } else if (strcmp(option, "fi_bit") == 0) {
-      config.fi_bit = atoi(value);
-      assert(config.fi_bit >= 0 && "invalid fi_bit in config file");
-    //======== Add number of corrupted bits QINING @MAR 13th========
-    } else if (strcmp(option, "fi_num_bits") == 0){
-    	config.fi_num_bits = atoi(value);
-    	assert(config.fi_num_bits >=0 && "invalid fi_num_bits in config file");
-    //==============================================================	
-    //======== Add second corrupted regs QINING @MAR 27th===========
-    } else if (strcmp(option, "fi_second_cycle") == 0){
-    	config.fi_second_cycle = atoll(value);
-      /*BEHROOZ: I changed the below line to the current one to fix the fi_cycle*/        
-    	assert(config.fi_second_cycle > 0 && "invalid fi_second_cycle in config file"); //assert(config.fi_second_cycle >= 0 && "invalid fi_second_cycle in config file");
-    //==============================================================
-    //==============================================================	
-    /*BEHROOZ: Add multiple corrupted regs*/
-    } else if (strcmp(option, "fi_max_multiple") == 0){
-        assert(atoll(value) > 0 && "invalid fi_max_multiple in config file");
-    	config.fi_max_multiple = atoi(value);
-    } else if (strcmp(option, "fi_next_cycle") == 0){
-    	assert(atoll(value) > 0 && "invalid fi_next_cycle in config file");
-    	config.fi_next_cycles[fi_next_cycles_index] = atoll(value);
-        fi_next_cycles_index++;
-        fi_next_cycles_count = fi_next_cycles_index;
-    //==============================================================
-    } else {
-      fprintf(stderr, 
-              "ERROR: Unknown option %s for LLFI runtime fault injection\n",
-              option);
-      exit(1);
-    }
-  }
-  /*
-  debug(("type, %s; cycle, %lld; index, %ld; reg_index, %d; fi_bit, %d\n", 
-         config.fi_type, config.fi_cycle, config.fi_index, 
-         config.fi_reg_index, config.fi_bit));
-  */
-  fclose(ficonfigFile);
+		// coverity[DC.WEAK_CRYPTO]
+		val = val * ((unsigned long long)RAND_MAX + 1) + rand();
+	}
+	return val;
+}
+
+void _parseHDFITVariables() {
+	char* env_buf = NULL;
+	long long totCycles = 0;
+	config.fi_accordingto_cycle = true;
+	config.fi_cycle = -1;
+	config.fi_bit = -1;
+
+	// Parsing total ops counter
+	if(env_buf = getenv(BLASFIOPSCNT_ENV_VAR)) {
+		totCycles = atoll(env_buf);
+	} else {
+		printf("%s environment variable uninitialized!\n", BLASFIOPSCNT_ENV_VAR);
+		return;
+	}
+
+	// Parsing type of corruption
+	if(env_buf = getenv(BLASFICORRUPTION_ENV_VAR)) {
+		if(strcmp(env_buf, BLASFICORRUPTION_STUCKHIGH_CONST) == 0) {
+			strncpy(config.fi_type, "stuck_at_1", OPTION_LENGTH);
+		} else if(strcmp(env_buf, BLASFICORRUPTION_STUCKLOW_CONST) == 0) {
+			strncpy(config.fi_type, "stuck_at_0", OPTION_LENGTH);
+		} else if(strcmp(env_buf, BLASFICORRUPTION_FLIP_CONST) == 0) {
+			strncpy(config.fi_type, "bitflip", OPTION_LENGTH);
+		} else {
+			printf("Invalid %s setting for environment variable %s!\n", env_buf, BLASFICORRUPTION_ENV_VAR);
+			exit(-1);
+		}
+	} else {
+		printf("%s environment variable uninitialized!\n", BLASFICORRUPTION_ENV_VAR);
+		return;
+	}
+
+	// Parsing FI mode (just transient or disabled)
+        if(env_buf = getenv(BLASFIMODE_ENV_VAR)) {
+                if(strcmp(env_buf, BLASFIMODE_TRANSIENT_CONST) == 0) {
+                        config.fi_cycle = totCycles>0 ? 1 + (_rand_uint128() % totCycles) : -1;
+                } else if(strcmp(env_buf, BLASFIMODE_NONE_CONST) != 0) {
+                        printf("Invalid %s setting for environment variable %s!\n", env_buf, BLASFIMODE_ENV_VAR);
+                        exit(-1);
+                }
+        } else {
+                printf("%s environment variable uninitialized!\n", BLASFIMODE_ENV_VAR);
+                return;
+        }
+}
+
+void _printHDFITOpsCnt() {
+        printf("[HDFIT]\t Rank 0: OpsCnt = %lld\n", curr_cycle-1);
+        fflush(stdout);
 }
 
+void _printHDFITVariables(long long fi_cycle, int fi_bit, unsigned size, char* opcode) {
+#ifndef HDFIT_DOUBLE
+	int fi_width = 32;
+#else // HDFIT_DOUBLE
+	int fi_width = 64;
+#endif
+	printf("[HDFIT]\t\t FI enabled on rank = 0\n");
+	if(fi_cycle > 0)
+	{
+		printf("[HDFIT]\t\t FI at op = %lld\n", fi_cycle-1);
+		printf("[HDFIT]\t\t Bit pos = %d\n", fi_bit%fi_width);
+		printf("[HDFIT]\t\t Raw bit pos = %d\n", fi_bit);
+		printf("[HDFIT]\t\t Size = %d\n", size);
+		printf("[HDFIT]\t\t Op code = %s\n", opcode);
+	}
+	fflush(stdout);
+}
+//-------------------------------------------------------------------
+
 /**
  * external libraries
  */
+// HDFIT: Replacing standard configuration parsing with HDFIT interface
 void initInjections() {
   _initRandomSeed();
-  _parseLLFIConfigFile();
+  _parseHDFITVariables();
+  // Registering function to print ops count with atexit
+  atexit(_printHDFITOpsCnt);
   getOpcodeExecCycleArray(OPCODE_CYCLE_ARRAY_LEN, opcodecyclearray);
-
-  char injectedfaultsfilename[80];
-  strncpy(injectedfaultsfilename, "llfi.stat.fi.injectedfaults.txt", 80);
-  injectedfaultsFile = fopen(injectedfaultsfilename, "a");
-  if (injectedfaultsFile == NULL) {
-    fprintf(stderr, "ERROR: Unable to open injected faults stat file %s\n",
-            injectedfaultsfilename);
-    exit(1);
-  }
-
   start_tracing_flag = TRACING_FI_RUN_INIT; //Tell instTraceLib that we are going to inject faults
 }
+//--------------------------------------------------------------------
 
-bool preFunc(long llfi_index, unsigned opcode, unsigned my_reg_index, 
+// HDFIT: simplified preFunc to improve performance
+bool preFunc(long llfi_index, unsigned opcode, unsigned my_reg_index,
              unsigned total_reg_target_num) {
-  if (opcodecyclearray[opcode] < 0 &&
-          "opcode does not exist, need to update instructions.def")
-     return false;
-  
-   if (! fiFlag) return false;
-   if (my_reg_index == 0)
-    is_fault_injected_in_curr_dyn_inst = false;
-
-  bool inst_selected = false;
-  bool reg_selected = false;
-  if (config.fi_accordingto_cycle) {
-    if (config.fi_cycle >= curr_cycle && 
-        config.fi_cycle < curr_cycle + opcodecyclearray[opcode])
-      inst_selected = true;
-  } else {
-    // inject into every runtime instance of the specified instruction
-    if (llfi_index == config.fi_index)
-      inst_selected = true;
-  }
 
-  // each register target of the instruction get equal probability of getting
-  // selected. the idea comes from equal probability of drawing lots
-  if (inst_selected && (!is_fault_injected_in_curr_dyn_inst)) {
-    // NOTE: if fi_reg_index specified, use it, otherwise, randomly generate
-    if (config.fi_reg_index >= 0)
-      reg_selected = (my_reg_index == config.fi_reg_index);
-    else 
-      reg_selected = _getDecision(1.0 / (total_reg_target_num - my_reg_index));
-
-    if (reg_selected) {
-      //debug(("selected reg index %u\n", my_reg_index));
-      is_fault_injected_in_curr_dyn_inst = true;
-    }
-  }
+	reg_selected = false;
+	if (config.fi_cycle == curr_cycle && !is_fault_injected_in_curr_dyn_inst) {
+	// each register target of the instruction get equal probability of getting
+	// selected. the idea comes from equal probability of drawing lots
+	// NOTE: if fi_reg_index specified, use it, otherwise, randomly generate
+		if (config.fi_reg_index >= 0)
+			reg_selected = (my_reg_index == config.fi_reg_index);
+		else
+			reg_selected = _getDecision(1.0 / (total_reg_target_num - my_reg_index));
 
-  if (my_reg_index == total_reg_target_num - 1)
-    curr_cycle += opcodecyclearray[opcode];
+		if (reg_selected) {
+			//debug(("selected reg index %u\n", my_reg_index));
+			is_fault_injected_in_curr_dyn_inst = true;
+		}
+	}
 
-  return reg_selected;
+	if (my_reg_index == 0) {
+		is_fault_injected_in_curr_dyn_inst = false;
+		curr_cycle++;
+	}
+
+	return reg_selected;
 }
+//-------------------------------------------------
 
 void injectFunc(long llfi_index, unsigned size, 
                 char *buf, unsigned my_reg_index, unsigned reg_pos, char* opcode_str) {
@@ -222,6 +225,12 @@ void injectFunc(long llfi_index, unsigned size,
   if (! fiFlag) return;
   start_tracing_flag = TRACING_FI_RUN_FAULT_INSERTED; //Tell instTraceLib that we have injected a fault
 
+// HDFIT: Optionally re-initializing seed for apps that need it
+#ifdef HDFIT_SRAND
+  _initRandomSeed();
+#endif
+//------------------------------------------------------------
+
   unsigned fi_bit, fi_bytepos, fi_bitpos;
   unsigned char oldbuf;
   
@@ -258,18 +267,23 @@ void injectFunc(long llfi_index, unsigned size,
 	  memcpy(&oldbuf, &buf[fi_bytepos], 1);
 	
 	  //======== Add opcode_str QINING @MAR 11th========
+// HDFIT: Using custom print function instead of default file
+	  _printHDFITVariables(config.fi_cycle, fi_bit, size, opcode_str);
+/*
 	  fprintf(injectedfaultsFile, 
           "FI stat: fi_type=%s, fi_max_multiple=%d, fi_index=%ld, fi_cycle=%lld, fi_reg_index=%u, "
           "fi_reg_pos=%u, fi_reg_width=%u, fi_bit=%u, opcode=%s\n", config.fi_type, config.fi_max_multiple,
           llfi_index, fi_cycle_to_print, my_reg_index, reg_pos, size, fi_bit, opcode_str);
+*/
 	  /*BEHROOZ: The below line is substituted with the above one as there was an 
            issue when we wanted to both inject in multiple bits and multiple
            locations.
            llfi_index, config.fi_cycle, my_reg_index, reg_pos, size, fi_bit, opcode_str);*/
 	  //===============================================================
- 	  fflush(injectedfaultsFile); 
+	  //fflush(injectedfaultsFile);
 	  //===============================================================
-	  
+//-----------------------------------------------------------
+
 	  //======== Add second corrupted regs QINING @MAR 27th===========
 	  //update the fi_cycle to the fi_second_cycle,
 	  // so later procedures can still use fi_cycle to print stat info
@@ -313,6 +327,9 @@ void turnOnInjections() {
 	fiFlag = 1;
 }
 
+// HDFIT: dropping fclose for output file
 void postInjections() {
-	fclose(injectedfaultsFile); 
+       //fclose(injectedfaultsFile);
 }
+
+//------------------------------------------------------------
-- 
2.25.1

