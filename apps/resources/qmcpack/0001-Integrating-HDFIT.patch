From 6d582bcb29a6b2f462778bedb0926f3254f47f3d Mon Sep 17 00:00:00 2001
From: Alessio Netti <alessio.netti@intel.com>
Date: Mon, 28 Feb 2022 10:24:40 +0100
Subject: [PATCH] Integrating HDFIT

---
 src/Message/AppAbort.cpp | 10 +++++
 src/QMCApp/qmcapp.cpp    | 92 +++++++++++++++++++++++++++++++++++++++-
 src/faultInjector.h      | 45 ++++++++++++++++++++
 3 files changed, 146 insertions(+), 1 deletion(-)
 create mode 100644 src/faultInjector.h

diff --git a/src/Message/AppAbort.cpp b/src/Message/AppAbort.cpp
index ce6178cec..4877065b7 100644
--- a/src/Message/AppAbort.cpp
+++ b/src/Message/AppAbort.cpp
@@ -3,6 +3,7 @@
 // License.  See LICENSE file in top directory for details.
 //
 // Copyright (c) 2020 QMCPACK developers.
+// Copyright (C) 2022 Intel Corporation (HDFIT components)
 //
 // File developed by: Peter Doak, doakpw@ornl.gov, Oak Ridge National Lab
 //
@@ -12,6 +13,9 @@
 #include "AppAbort.h"
 #include <iostream>
 #include "config.h"
+//--------------------------------------------------------------------------------------------
+#include <signal.h>
+//--------------------------------------------------------------------------------------------
 
 #ifdef HAVE_MPI
 #include <mpi.h>
@@ -19,12 +23,18 @@
 void breakableAppAbort(const std::string& str_msg)
 {
   std::cerr << str_msg << '\n';
+//--------------------------------------------------------------------------------------------  
+  raise(SIGUSR2);
+//--------------------------------------------------------------------------------------------
   MPI_Abort(MPI_COMM_WORLD, 1);
 }
 #else
 void breakableAppAbort(const std::string& str_msg)
 {
   std::cerr << str_msg << '\n';
+//--------------------------------------------------------------------------------------------
+  raise(SIGUSR2);
+//--------------------------------------------------------------------------------------------
   exit(1);
 }
 #endif
diff --git a/src/QMCApp/qmcapp.cpp b/src/QMCApp/qmcapp.cpp
index 01295fd65..e60a65f88 100644
--- a/src/QMCApp/qmcapp.cpp
+++ b/src/QMCApp/qmcapp.cpp
@@ -3,6 +3,7 @@
 // See LICENSE file in top directory for details.
 //
 // Copyright (c) 2020 QMCPACK developers.
+// Copyright (C) 2022 Intel Corporation (HDFIT components)
 //
 // File developed by: Ken Esler, kpesler@gmail.com, University of Illinois at Urbana-Champaign
 //                    Luke Shulenburger, lshulen@sandia.gov, Sandia National Laboratories
@@ -30,6 +31,54 @@
 #include "QMCApp/QMCMain.h"
 #include "Utilities/qmc_common.h"
 
+//--------------------------------------------------------------------------------------------
+#include "../faultInjector.h"
+#include <unistd.h>
+#include <signal.h>
+
+int chosenForFi;
+int fRank;
+
+void fiAbortHandler(int sig)
+{
+  blasFiPrint();
+  if(sig!=SIGUSR2) {
+    exit(sig);
+  }
+}
+
+// returns
+//      negative on error
+//      0 if this mpi rank does no fi
+//      else this rank does fi
+static int rankChooseForFi(int mpiSize, int mpiRank, MPI_Comm comm)
+{
+  if (0 >= mpiSize) {
+    printf("mpiSize <= 0\n");
+    return -1;
+  }
+
+  int mpiRankFi = -1;
+  if (0 == mpiRank) {
+    // Assuming srand was called in blasFiInit()
+    // coverity[DC.WEAK_CRYPTO]
+    mpiRankFi = rand() % mpiSize;
+  }
+
+  if (MPI_Bcast(&mpiRankFi, 1, MPI_INT, 0, comm) != MPI_SUCCESS) {
+    printf("Rank %d, failed to broadcast FI rank\n", mpiRank);
+    return -1;
+  }
+
+  if (mpiSize < mpiRankFi) {
+    printf("mpiRankFi larger than mpiSize\n");
+    return -1;
+  }
+
+  return (mpiRankFi == mpiRank);
+}
+//--------------------------------------------------------------------------------------------
+
 void output_hardware_info(Communicate* comm, Libxml2Document& doc, xmlNodePtr root);
 
 /** @file qmcapp.cpp
@@ -47,6 +96,34 @@ int main(int argc, char** argv)
 #ifdef HAVE_MPI
   mpi3::environment env(argc, argv);
   OHMMS::Controller->initialize(env);
+
+//--------------------------------------------------------------------------------------------
+  MPI_Comm comm = OHMMS::Controller->getMPI();
+  int size      = OHMMS::Controller->size();
+  fRank         = OHMMS::Controller->rank();
+  
+  if (blasFiInit(fRank))
+  {
+    printf("blasFiInit failed\n");
+    exit(1);
+  }
+  chosenForFi = rankChooseForFi(size, fRank, comm);
+  if (0 > chosenForFi)
+  {
+    printf("rankChooseForFi failed\n");
+    exit(1);
+  }
+  if(chosenForFi && blasFiSet())
+  {
+    printf("blasFiSet failed\n");
+    exit(1);
+  }
+
+  signal(SIGSEGV, fiAbortHandler);
+  signal(SIGTERM, fiAbortHandler);
+  signal(SIGUSR2, fiAbortHandler);
+//--------------------------------------------------------------------------------------------
+
 #endif
   try
   {
@@ -224,7 +301,12 @@ int main(int argc, char** argv)
 
     bool qmcSuccess = qmc->execute();
     if (!qmcSuccess)
+    {
+//--------------------------------------------------------------------------------------------
+      blasFiPrint();
+//--------------------------------------------------------------------------------------------
       qmcComm->barrier_and_abort("main(). QMC Execution failed.");
+    }
 
     Libxml2Document timingDoc;
     timingDoc.newDoc("resources");
@@ -245,17 +327,25 @@ int main(int argc, char** argv)
   catch (const std::exception& e)
   {
     app_error() << e.what() << std::endl;
+//--------------------------------------------------------------------------------------------
+    blasFiPrint();
+//--------------------------------------------------------------------------------------------
     APP_ABORT("Unhandled Exception");
   }
   catch (...)
   {
     app_error() << "Exception not derived from std::exception thrown" << std::endl;
+//--------------------------------------------------------------------------------------------
+    blasFiPrint();
+//--------------------------------------------------------------------------------------------
     APP_ABORT("Unhandled Exception");
   }
 
   if (OHMMS::Controller->rank() == 0)
     std::cout << std::endl << "QMCPACK execution completed successfully" << std::endl;
-
+//--------------------------------------------------------------------------------------------
+  blasFiPrint();
+//--------------------------------------------------------------------------------------------
   OHMMS::Controller->finalize();
 
   return 0;
diff --git a/src/faultInjector.h b/src/faultInjector.h
new file mode 100644
index 000000000..c93a7d370
--- /dev/null
+++ b/src/faultInjector.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2022 Intel Corporation
+ * SPDX-License-Identifier: NCSA
+ */
+
+#ifndef INTERFACE_FAULTINJECTOR_H_
+#define INTERFACE_FAULTINJECTOR_H_
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define BLASFIOPSCNT_ENV_VAR "BLASFI_OPSCNT"
+
+#define BLASFIMODE_ENV_VAR "BLASFI_MODE"
+#define BLASFIMODE_NONE_CONST "NONE"
+#define BLASFIMODE_TRANSIENT_CONST "TRANSIENT"
+#define BLASFIMODE_PERMANENT_CONST "PERMANENT"
+
+#define BLASFICORRUPTION_ENV_VAR "BLASFI_CORRUPTION"
+#define BLASFICORRUPTION_NONE_CONST "NONE"
+#define BLASFICORRUPTION_STUCKHIGH_CONST "STUCKHIGH"
+#define BLASFICORRUPTION_STUCKLOW_CONST "STUCKLOW"
+#define BLASFICORRUPTION_FLIP_CONST "FLIP"
+
+#define BLASFIBITS_ENV_VAR "BLASFI_BITS"
+#define BLASFIBITS_NONE_CONST "NONE"
+#define BLASFIBITS_EVERYWHERE_CONST "EVERYWHERE"
+#define BLASFIBITS_MANTISSA_CONST "MANTISSA"
+
+#define BLASFIOUTPUT_ENV_VAR "BLASFI_OUTPUT"
+#define BLASFIOUTPUT_STDOUT_CONST "STDOUT"
+#define BLASFIOUTPUT_STDERR_CONST "STDERR"
+
+extern int blasFiInit(int rank);
+extern int blasFiSet();
+extern int blasFiClose();
+extern void blasFiPrint();
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#endif /* INTERFACE_FAULTINJECTOR_H_ */
-- 
2.25.1

